/************************************************************************
 * Copyright 2007-2016 - General Electric Company, All Rights Reserved
 *
 * Project: SADL
 *
 * Description: The Semantic Application Design Language (SADL) is a
 * language for building semantic models and expressing rules that
 * capture additional domain knowledge. The SADL-IDE (integrated
 * development environment) is a set of Eclipse plug-ins that
 * support the editing and testing of semantic models using the
 * SADL language.
 *
 * This software is distributed "AS-IS" without ANY WARRANTIES
 * and licensed under the Eclipse Public License - v 1.0
 * which is available at http://www.eclipse.org/org/documents/epl-v10.php
 *
 ***********************************************************************/

grammar com.ge.research.sadl.SADL hidden(WS, ML_COMMENT, SL_COMMENT) //with with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate sADL "http://www.ge.com/research/sadl/SADL"



SadlModel :
    'uri' baseUri=STRING ('alias' alias=ID)? ('version' version=STRING)? 
    	annotations+=SadlAnnotation* EOS 
    imports+=SadlImport*
    elements+=SadlModelElement*;
    
SadlAnnotation :
	','? '(' type=('alias'|'note') contents+=STRING (',' contents+=STRING)* ')'
;

SadlImport :
    'import' importedResource=[SadlModel|STRING] ('as' alias=ID)? EOS;

// The various kinds of elements that make up the body of a model.
SadlModelElement :
		SadlStatement EOS
	|	ExpressionStatement => EOS
	|	RuleStatement => EOS
;

// These are the things that translate directly to OWL.
SadlStatement returns SadlStatement:
	    SadlResource 
	    	({SadlClassOrPropertyDeclaration.classOrProperty+=current} 'is' 'a' 
	    		('top-level'? 'class' 
	    		| 'type' 'of' superElement=SadlPrimaryTypeReference facet=SadlDataTypeFacet?)
				(describedBy+=SadlPropertyDeclarationInClass+ | (','? restrictions+=SadlPropertyRestriction)+)?
			|{SadlProperty.nameOrRef=current} 'is' 'a' 'property' (','? restrictions+=SadlPropertyRestriction)*
			|{SadlProperty.nameOrRef=current} (','? restrictions+=SadlPropertyRestriction)+
			|{SadlSameAs.nameOrRef=current} 'is' 'the' 'same' 'as' (complement?='not')? sameAs=SadlTypeReference
			|{SadlDifferentFrom.nameOrRef=current} 'is' 'not' 'the' 'same' 'as' notTheSameAs=SadlTypeReference
			|{SadlInstance.nameOrRef=current} ('is' AnArticle type=SadlTypeReference)? propertyInitializers+=SadlPropertyInitializer*
			|{SadlDisjointClasses.classes+=current} ('and' classes+=SadlResource)+ 'are' 'disjoint'
			)
	| 	{SadlClassOrPropertyDeclaration}  '{' classOrProperty+=SadlResource (','  classOrProperty+=SadlResource)* '}' 'are' 
				(('top-level'? 'classes' | 'types' 'of' superElement=SadlPrimaryTypeReference) describedBy+=SadlPropertyDeclarationInClass* 
			|	{SadlDisjointClasses.types+=current} 'disjoint'
			|	{SadlDifferentFrom.types+=current} (complement?='not')? 'the' 'same')
    | 	{SadlProperty} AnArticle? 'relationship' 'of' from=SadlTypeReference 'to' to=SadlTypeReference 'is' property=SadlResource 
    | 	AnArticle SadlTypeReference (
    		{SadlInstance.type=current} instance=SadlResource propertyInitializers+=SadlPropertyInitializer*
    	|	{SadlNecessaryAndSufficient.subject=current} 'is' AnArticle object=SadlResource 'only' 'if' propConditions+=SadlPropertyCondition ('and' propConditions+=SadlPropertyCondition)*)
;

SadlPropertyCondition :
	property=[SadlResource|DNAME] cond+=SadlCondition
;

SadlPropertyInitializer:
	','? ('with'|'has') property=[SadlResource|DNAME] (value=SadlExplicitValue | '(' value=SadlNestedInstance')')
;

SadlNestedInstance returns SadlInstance:
		instance=SadlResource 'is' article=AnArticle type=SadlTypeReference propertyInitializers+=SadlPropertyInitializer*
	|	article=AnArticle type=SadlTypeReference instance=SadlResource? propertyInitializers+=SadlPropertyInitializer*
;

SadlResource:
	name=[SadlResource|DNAME] annotations+=SadlAnnotation*
;

SadlDataTypeFacet :	
		minexin=('(' | '[') min=NUMBER? ',' max=NUMBER? maxexin=(']' | ')')
	|	regex=STRING
	|	'length' (len=NUMBER | minlen=NUMBER '-' maxlen=NUMBER)
	|	'{' values+=FacetValue (','? values+=FacetValue)* '}'
;

FacetValue :
	STRING | NUMBER
;

// TypeReferences
SadlTypeReference returns SadlTypeReference:
    SadlUnionType
;

SadlUnionType returns SadlTypeReference:
	SadlIntersectionType ({SadlUnionType.left=current} (','|'or') right=SadlIntersectionType)*
;

SadlIntersectionType returns SadlTypeReference:
	SadlPrimaryTypeReference ({SadlIntersectionType.left=current} ('and') right=SadlPrimaryTypeReference)*
;

SadlPrimaryTypeReference returns SadlTypeReference:
		{SadlSimpleTypeReference} type=[SadlResource|DNAME]
	|	{SadlPrimitiveDataType} primitiveType=SadlDataType
	|	'(' SadlPropertyCondition ')'
	|	'{' SadlTypeReference '}'
;

// Built-in primitive data types
enum SadlDataType :
    string | boolean | decimal | int | long | float | double | duration | dateTime | time | date |
    gYearMonth | gYear | gMonthDay | gDay | gMonth | hexBinary | base64Binary | anyURI | 
    integer | negativeInteger | nonNegativeInteger | positiveInteger | nonPositiveInteger |  
    unsignedByte | unsignedInt | anySimpleType | data;

// Class declarations may also describe the class's properties.
SadlPropertyDeclarationInClass returns SadlProperty:
    	','? 'described' 'by' nameDeclarations+=SadlResource restrictions+=SadlPropertyRestriction*;

SadlPropertyRestriction :
    	SadlCondition
    |   {SadlTypeAssociation} ('describes'|'of') domain=SadlTypeReference
    |   {SadlRangeRestriction} ('has'|'with') ('a' singleValued?='single' 'value'|('a' list?='List'|lists?='Lists') 'of' 'values'|'values') 'of' 'type' range=SadlPrimaryTypeReference
    |   {SadlIsInverseOf}	'is' 'the' 'inverse' 'of' otherProperty=[SadlResource|DNAME]
    |   {SadlIsTransitive} 'is' 'transitive'
    |   {SadlIsSymmetrical} 'is' 'symmetrical'
    |   {SadlIsAnnotation} 'is' 'a' 'type' 'of' 'annotation'
    |   {SadlDefaultValue} 'has' ('level' level=NUMBER)? 'default' defValue=SadlExplicitValue
    |   {SadlIsFunctional} 'has' 'a' 'single' (inverse?='subject' | 'value')?
    |   {SadlMustBeOneOf} 'must' 'be' 'one' 'of' '{' values+=SadlExplicitValue (',' values+=SadlExplicitValue)* '}'
    |   {SadlCanOnlyBeOneOf} 'can' 'only' 'be' 'one' 'of' '{' values+=SadlExplicitValue (',' values+=SadlExplicitValue)* '}'
;

SadlCondition :
		SadlAllValuesCondition
	|   SadlHasValueCondition
    |   SadlCardinalityCondition
;

SadlAllValuesCondition :
	'only' ('has'|'with') 'values' 'of' 'type' type=SadlPrimaryTypeReference;

SadlHasValueCondition :
	'always' ('has'|'with') 'value' restriction=SadlExplicitValue;

SadlCardinalityCondition :
	('has'|'with') 
	('at' operator=('least'|'most') |'exactly') 
	cardinality=CardinalityValue ('value'|'values') 
	('of' 'type' type=SadlPrimaryTypeReference | 'each' 'of' 'types' type=SadlPrimaryTypeReference)?;

CardinalityValue :
	NUMBER | 'one'
;

SadlExplicitValue:
		SadlResource		// e.g., George
	|	{SadlNumberLiteral} literalNumber=NUMBER
    |   {SadlStringLiteral} literalString=STRING
    |   {SadlBooleanLiteral} (truethy?='true'|'false')
//    |   {SadlBag} '{' (explicitValues+=SadlExplicitValue (
//    				(',' explicitValues+=SadlExplicitValue)+
//    			|	(operator='and' explicitValues+=SadlExplicitValue)+
//    			|	(operator='or' explicitValues+=SadlExplicitValue)+)?)? '}'
    |   {SadlValueList} '[' (explicitValues+=SadlExplicitValue (',' explicitValues+=SadlExplicitValue)*)? ']'
	|	{SadlConstantLiteral} term=('PI'|'known')
;

// These articles can appear before the property name and are indicative of the functionality of the property or
//	the cardinality of the property on the class
AnArticle :
	IndefiniteArticle | DefiniteArticle;

IndefiniteArticle :
	'A'|'a'|'An'|'an';

DefiniteArticle :
	'The'|'the';

// This is primarily for debugging purposes. Any expression can be given after "Expr:" to see if it is valid. 
// Such an expression has no meaning in translation.
ExpressionStatement:
	'Expr:' expr=Expression ('=>' evaluatesTo=STRING)?;

RuleStatement :
	'Rule' name=QNAME ':'? 'if' ifs+=Expression // (','? ifs+=Expression)*
						   'then' thens +=Expression // (','? thens+=Expression)*
;

// Real expressions start here
Expression returns Expression: // (1)
	OrExpression;

OrExpression returns Expression:
	AndExpression ({BinaryOperation.left=current} op=OpOr right=AndExpression)*;

OpOr:
	'or' | '||';

AndExpression returns Expression:
	EqualityExpression ({BinaryOperation.left=current} op=OpAnd right=EqualityExpression)*;

OpAnd:
	'and' | '&&';

EqualityExpression returns Expression:
	RelationalExpression ({BinaryOperation.left=current} op=InfixOperator right=RelationalExpression)*;

InfixOperator :
	'==' 
	| '!=' 
	| '=' 
	| 'is' ('not'? 'unique' 'in')? 
	| 'contains'
	| 'does' 'not' 'contain'
;

RelationalExpression returns Expression:
	Addition ->({BinaryOperation.left=current} =>op=OpCompare right=Addition)*;

OpCompare:
	'>=' | '<=' | '>' | '<';

Addition returns Expression:
	Multiplication (({Plus.left=current} '+' | {Minus.left=current} '-') right=Multiplication)*;

Multiplication returns Expression:
	Power (({Multi.left=current} '*' | {Div.left=current} '/' | {Mod.left=current} '%') right=Power)*;

Power returns Expression:
	PropOfSubject (({Exp.left=current} '^') right=PropOfSubject)*;

//PrefixOperation returns Expression :
//	  {UnaryExpression} 'not' negated=PrefixOperation
//	| {UnitaryOperation} op=('!' | 'only' | '-') expr=PrefixOperation // this can be applied to other unitary operations
//	| {ElementInList} 'element' (before?='before'|after?='after')? element=PrefixOperation
//	| SubjHasProp
//;
//
//// SubjHasProp has left associativity: Subj with prop1 with prop2 is equivalent to ((Subj with prop1) with prop2)
//SubjHasProp returns Expression: // (18)
//	PropOfSubject (=>({SubjHasProp.left=current} ('with'|'has') prop=SadlResource) right=SubjHasProp)?
////	PropOfSubject (<!THEN>(
////			','? 'has' ( {SubjHasProp.left=current} prop=DNAME right=PropOfSubject?
////			  | {PPP.left=current} negated?='not'? 'been' right=PropOfSubject)
////		| {SubjHasProp.left=current} 'with' prop=DNAME right=PropOfSubject?)*)
//	//	PropOfSubject ({SubjHasProp.left=current} ('has'|'with') prop = ID /*[sadl::ResourceName]*/  right=PrimaryExpression)*
//;

// PropOfSubject has right associativity: prop1 of prop2 of Subj is equivalent to prop1 of (prop2 of Subj)
PropOfSubject returns Expression: // (17)
	PrimaryExpression ->(({PropOfSubject.left=current} ('of'|'for'|'in') right=PropOfSubject) |  
					  (=>({SubjHasProp.left=current} ('with'|'has') prop=SadlResource) right=PrimaryExpression)+)?
|   {UnaryExpression} op=('not' | '!' | 'only' | '-') expr=PropOfSubject // this can be applied to other unitary operations
|   {ElementInList} 'element' (before?='before'|after?='after')? element=PropOfSubject;

// primary expressions are the atom units of expression in the grammar	
PrimaryExpression returns Expression: // (20)
	'(' Expression ')' 
	| {Declaration} article=AnArticle type=SadlResource ->(newName=DNAME)?
	| {StringLiteral} value=STRING 
	| {NumberLiteral} value=AnyNumber ->({Unit.value=current} unit=UNIT)?
	| {BooleanLiteral} value=BooleanValue 
	| {Constant} constant=Constants
	| {Function} =>(called=DNAME '(') arglist+=Expression? (',' arglist+=Expression)* ')'
	| FeatureCall
	| {ValueTable} valueTable=ValueTable;
	
FeatureCall returns SadlResource:
	{Name} name=[SadlResource|DNAME]
;

UNIT :
	ID | STRING
;

	// the truth table
ValueTable:
	'[' row=ValueRow ']'
	// e.g., [George, 23, "Purple", 38.186111]
	| '{' '[' rows+=ValueRow ']' (','? '[' rows+=ValueRow ']')* '}'
	// e.g., {[George, 23, "Purple", 38.186111], [Martha, 24, "Pink", 45.203]}
;

BooleanValue:
	'true' | 'false';
	

Constants:
	'PI' | '--' | 'None' | 'type' | 'length' | 'count' | 'index' | ('first'|'last') 'element';

ValueRow:
	explicitValues+=Expression (',' explicitValues+=Expression)*; // e.g., George, 23, "Purple", 38.186111

QNAME:
	(prefix=ID ':')? frag=DNAME;

DNAME hidden():
	ID => DNAME_FRAGMENT*;

DNAME_FRAGMENT hidden():
	'.' (ID | NUMBER);

AnyNumber returns ecore::EBigDecimal hidden() :
	DecimalNumber EXPONENT?;

DecimalNumber returns ecore::EBigDecimal hidden() :
	NUMBER => ('.' NUMBER)?;

	// making this a terminal prevents the "-" from getting picked up as unary operator
terminal EXPONENT returns ecore::EBigDecimal:
	('e' | 'E') ('-' | '+')? NUMBER;

terminal NUMBER returns ecore::EInt:
	('0'..'9')+;

	// EOS matches one whitespace character or EOF after the period in order to
// disambiguate the end of sentence period from periods in names.
terminal EOS:
//    '.' (WS|EOF);
	'.' (' ' | '\t' | '\r' | '\n' | EOF);

terminal WS:
	('\u00A0' | ' ' | '\t' | '\r' | '\n')+;

terminal ID:
	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9' | '-' | '%' | '~')*;

terminal STRING:
	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";

terminal ML_COMMENT:
	'/*'->'*/';

terminal SL_COMMENT:
	'//' !('\n' | '\r')* ('\r'? '\n')?;

terminal ANY_OTHER:
	.;
